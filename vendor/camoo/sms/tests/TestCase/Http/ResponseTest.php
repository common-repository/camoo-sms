<?php

declare(strict_types=1);

namespace CamooSms\Test\TestCase\Http;

use Camoo\Http\Curl\Domain\Response\ResponseInterface;
use Camoo\Sms\Http\Response;
use PHPUnit\Framework\TestCase;

class ResponseTest extends TestCase
{
    private ?ResponseInterface $response;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->response = $this->createMock(ResponseInterface::class);
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        $this->response = null;
    }

    public function testCanGetXml(): void
    {
        $string = '<ul><li>first</li><li>second</li></ul>';
        $this->response->expects($this->any())->method('getBody')->willReturn($string);
        $response = new Response($this->response, 'xml');
        $this->assertStringStartsWith('<?xml version="1.0"?>', $response->getXml());
    }

    public function testCanNotGetXmlOnJson(): void
    {
        $string = '<ul><li>first</li><li>second</li></ul>';
        $this->response->expects($this->any())->method('getBody')->willReturn($string);
        $this->response->expects($this->once())->method('getJson')->willReturn([]);

        $response = new Response($this->response);
        $this->assertNull($response->getXml());
    }

    public function testCanNotGetXmlOnWrongXml(): void
    {
        $string = 'fooBar';
        $this->response->expects($this->any())->method('getBody')->willReturn($string);
        $response = new Response($this->response, 'xml');
        $this->assertNull($response->getXml());
    }

    public function testJsonOnFailureHttpCode(): void
    {
        $this->response->expects($this->once())->method('getStatusCode')->willReturn(403);
        $this->response->expects($this->once())->method('getBody')->willReturn(null);
        $response = new Response($this->response);
        $this->assertSame(['status' => 'KO', 'message' => 'request failed!'], $response->getJson());
    }

    public function testGetXMLOnEmptyBody(): void
    {
        $this->response->expects($this->once())->method('getBody')->willReturn('');
        $response = new Response($this->response, 'xml');
        $this->assertNull($response->getXml());
    }
}
